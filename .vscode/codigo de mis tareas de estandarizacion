Balance/Codigo: 
import pandas as pd

# Cargar el archivo CSV
df = pd.read_csv("ruta/al/archivo.csv")  # Reemplaza con la ruta real

# Eliminar filas completamente vacías
df.dropna(how='all', inplace=True)

# Eliminar columnas completamente vacías
df.dropna(axis=1, how='all', inplace=True)

# Eliminar filas duplicadas
df.drop_duplicates(inplace=True)

# Limpiar nombres de columnas (quitar espacios)
df.columns = [col.strip() for col in df.columns]

# Función para limpiar celdas de texto: quita espacios y pone en formato Título
def clean_text(val):
    if isinstance(val, str):
        return val.strip().title()
    return val

# Aplicar limpieza a todo el DataFrame
df = df.applymap(clean_text)

# Guardar el archivo estandarizado
df.to_csv("archivo-estandarizado.csv", index=False)


Demanda/ codigo : 
import pandas as pd

# Reemplaza con la ruta de tu archivo CSV
archivo_entrada = "tu_archivo.csv"
archivo_salida = "archivo-estandarizado.csv"

# Cargar el archivo
df = pd.read_csv(archivo_entrada)

# Eliminar filas completamente vacías
df.dropna(how='all', inplace=True)

# Eliminar columnas completamente vacías
df.dropna(axis=1, how='all', inplace=True)

# Eliminar duplicados
df.drop_duplicates(inplace=True)

# Limpiar nombres de columnas
df.columns = [col.strip() for col in df.columns]

# Limpiar celdas de texto: quitar espacios y convertir a formato Título
def limpiar_texto(valor):
    if isinstance(valor, str):
        return valor.strip().title()
    return valor

df = df.applymap(limpiar_texto)

# Guardar el archivo limpio
df.to_csv(archivo_salida, index=False)

Ire estandarizado/codigo : 

import pandas as pd

# Ruta del archivo de entrada
archivo_entrada = "nombre-del-archivo.csv"  # Cambia esto

# Cargar el archivo CSV
df = pd.read_csv(archivo_entrada)

# Eliminar filas completamente vacías
df.dropna(how='all', inplace=True)

# Eliminar columnas completamente vacías
df.dropna(axis=1, how='all', inplace=True)

# Eliminar filas duplicadas
df.drop_duplicates(inplace=True)

# Limpiar nombres de columnas (quitar espacios a los lados)
df.columns = [col.strip() for col in df.columns]

# Función para limpiar celdas de texto
def limpiar_texto(valor):
    if isinstance(valor, str):
        return valor.strip().title()  # Quita espacios y pone Título
    return valor

# Aplicar limpieza a todo el DataFrame
df = df.applymap(limpiar_texto)

# Guardar el resultado
archivo_salida = "nombre-estandarizado.csv"  # Cambia esto
df.to_csv(archivo_salida, index=False)

Estructura de generacion estandarizada/ codigo :
import pandas as pd
import unicodedata

# Cargar datos
df = pd.read_csv("estructura-generacion-estandarizado.csv")

# 1. Convertir 'fecha' al tipo datetime
df['fecha'] = pd.to_datetime(df['fecha'], errors='coerce')

# 2. Estandarizar textos: minúsculas y sin tildes
def normalizar_texto(texto):
    if pd.isna(texto):
        return texto
    texto = texto.lower()
    texto = unicodedata.normalize('NFKD', texto).encode('ASCII', 'ignore').decode('utf-8')
    return texto

for col in ['indicador', 'region', 'tipo']:
    df[col] = df[col].astype(str).apply(normalizar_texto)

# 3. Eliminar duplicados
df = df.drop_duplicates()

# 4. Verificar valores nulos
valores_nulos = df.isnull().sum()

# 5. Mostrar resultados de limpieza
print("Valores nulos por columna:")
print(valores_nulos)

# Guardar el resultado estandarizado
df.to_csv("estructura_generacion_estandarizado_limpio.csv", index=False)

Fronteras estandarizado/ codigo :

import pandas as pd
import unicodedata

# Cargar datos
df = pd.read_csv("fronteras-estandarizado.csv")

# 1. Convertir la columna 'fecha' a tipo datetime
df['fecha'] = pd.to_datetime(df['fecha'], errors='coerce')

# 2. Normalizar el texto en la columna 'pais'
def normalizar_texto(texto):
    if pd.isna(texto):
        return texto
    texto = texto.lower()
    texto = unicodedata.normalize('NFKD', texto).encode('ascii', 'ignore').decode('utf-8')
    return texto

df['pais'] = df['pais'].astype(str).apply(normalizar_texto)

# 3. Eliminar duplicados
df = df.drop_duplicates()

# 4. Identificar valores nulos
valores_nulos = df.isnull().sum()
print("Valores nulos por columna:")
print(valores_nulos)

# 5. Guardar el archivo estandarizado
df.to_csv("fronteras_estandarizado_limpio.csv", index=False)





