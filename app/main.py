import streamlit as st

import plotly.express as px
import numpy as np
import pandas as pd
import requests


# PAGINA PRINCIPAL DEL PROYECTO(TITULO, IMAGEN Y DESCRIPCION)
def main():
    st.title("Proyecto Red El√©ctrica Espa√±a")

    st.image("https://norbelenergia.es/wp-content/uploads/2024/06/1200px-Red_Electrica_de_Espana_logo.svg1_.png", width=600)

    st.write("El objetivo principal de este proyecto es extraer, procesar y visualizar datos energ√©ticos de la web de Red El√©ctrica de Espa√±a (REE), " \
    "relacionados con la demanda el√©ctrica, el balance energ√©tico, la generaci√≥n y los intercambios internacionales de energ√≠a. Esto permite visualizar " \
    "y analizar c√≥mo se comporta el sistema el√©ctrico espa√±ol en distintos momentos del d√≠a y del a√±o.")

    st.write('Definicion de los datos:')
    # Esto es un selectbox que permite seleccionar entre los diferentes tipos de datos que tenemos
    # y muestra una breve descripcion de cada uno de ellos
    opcion = st.selectbox('Seleccionar los datos:', 
                                   ('Balance', 'Demanda', 'Generaci√≥n', 'Intercambio'))
    if opcion == 'Balance':
        st.info("üîÑ El **balance energ√©tico** representa la diferencia entre la energ√≠a generada y la consumida, incluyendo p√©rdidas y ajustes del sistema.")
    elif opcion == 'Demanda':
        st.info("‚ö° La **demanda el√©ctrica** muestra cu√°nta energ√≠a est√°n consumiendo los usuarios en un momento dado o durante un periodo.")
    elif opcion == 'Generaci√≥n':
        st.info("‚öôÔ∏è La **generaci√≥n el√©ctrica** indica cu√°nta energ√≠a se est√° produciendo y con qu√© fuentes (renovables, no renovables, nuclear, etc.).")
    elif opcion == 'Intercambio':
        st.info("üåç Los **intercambios internacionales** reflejan la energ√≠a que Espa√±a importa o exporta a pa√≠ses vecinos a trav√©s de las interconexiones.")

    st.write('Clasificaci√≥n de las fuentes de energ√≠a')
    # Esto es un selectbox que permite seleccionar entre los diferentes tipos de datos que tenemos
    # y muestra una breve descripcion de cada uno de ellos
    opcion = st.selectbox('Fuentes de energ√≠a:', 
                                   ('Renovables', 'No renovables', 'Otras categorias'))
    if opcion == 'Renovables':
        st.info(
            "üå± **Fuentes de energ√≠a renovables**\n\n"
            "Estas fuentes se regeneran de manera natural y son sostenibles en el tiempo. Incluyen:\n\n"
            "- E√≥lica\n"
            "- Hidr√°ulica\n"
            "- Hidroe√≥lica\n"
            "- Solar fotovoltaica\n"
            "- Solar t√©rmica\n"
            "- Otras renovables\n"
            "- Residuos renovables\n"
            "- Generaci√≥n renovable\n"
            "- Turbinaci√≥n bombeo\n"
            "- Entrega bater√≠a"
        )
    elif opcion == 'No renovables':
        st.info(
            "‚öôÔ∏è **Fuentes de energ√≠a no renovables**\n\n"
            "Estas fuentes provienen de recursos limitados o contaminantes. Incluyen:\n\n"
            "- Carb√≥n\n"
            "- Ciclo combinado\n"
            "- Cogeneraci√≥n\n"
            "- Fuel + Gas\n"
            "- Motores di√©sel\n"
            "- Nuclear\n"
            "- Residuos no renovables\n"
            "- Turbina de gas\n"
            "- Turbina de vapor\n"
            "- Generaci√≥n no renovable"
        )
    elif opcion == 'Otras categorias':
        st.info(
            "‚öñÔ∏è **Otras categor√≠as**\n\n"
            "Estas no son fuentes de generaci√≥n directa, pero est√°n presentes en el sistema. Incluyen:\n\n"
            "- Consumo bombeo (se usa para almacenar energ√≠a, no genera)\n"
            "- Demanda en b.c. (baja tensi√≥n, no es fuente)\n"
            "- Saldo I. internacionales (intercambios con otros pa√≠ses)\n"
            "- Saldo almacenamiento (puede incluir carga y entrega de bater√≠as)\n"
            "- Carga bater√≠a (almacenamiento, no producci√≥n directa)"
        )

# A√ëADIR LOS DATOS DE CADA UNA DE LAS SECCIONES EN LA FUNCION CORRESPONDIENTE
def Balance():
    st.title("Balance Energ√©tico")
    st.write("En este apartado se representa la cantidad total de electricidad generada por todas las fuentes disponibles " \
             "en el sistema el√©ctrico Espa√±ol a lo largo de los a√±os.")
    df_balance = pd.read_csv('../lib/data/processed/balance/balance-electrico-limpio.csv')
    
    df_balance['fecha'] = pd.to_datetime(df_balance['fecha'])
    df_balance['a√±o'] = df_balance['fecha'].dt.year

    seleccion = st.radio("Elegir tipo de grafico", ["√öltimos d√≠as", "A√±o espec√≠fico"])

    if seleccion == "√öltimos d√≠as":
        dias = st.selectbox("Selecciona el rango de d√≠as:", [7, 14, 30])
        fecha_max = df_balance['fecha'].max()
        fecha_min = fecha_max - pd.Timedelta(days=dias)
        df_filtrado = df_balance[df_balance['fecha'] >= fecha_min]

        titulo = f"Producci√≥n de energ√≠a - √öltimos {dias} d√≠as"
    else:
        a√±o = st.selectbox("Selecciona el a√±o:", sorted(df_balance['a√±o'].unique()))
        df_filtrado = df_balance[df_balance['a√±o'] == a√±o]
        titulo = f"Balance energ√©tico - A√±o {a√±o}"

    # Gr√°fico de l√≠neas filtrado
    grafico_lineas = df_filtrado.groupby(['fecha', 'energia'])['valor'].sum().reset_index()
    fig = px.line(grafico_lineas,
                  x='fecha',
                  y='valor',
                  color='energia',
                  title=titulo,
                  labels={'fecha': 'Fecha', 'valor': 'kWh'})
    fig.update_traces(line=dict(width=1))
    fig.update_layout(xaxis_title='Fecha', xaxis_tickformat='%d %b')
    st.plotly_chart(fig)

    # Gr√°fico de barras por a√±o (sin filtro)
    grafico_barras = df_balance.groupby(['a√±o', 'tipo'])['valor'].sum().reset_index()
    fig = px.bar(grafico_barras,
                 x='a√±o',
                 y='valor',
                 color='tipo',
                 title="Distribuci√≥n de la producci√≥n de energ√≠a por a√±os",
                 labels={'valor': 'kWh', 'a√±o': 'A√±o'},
                 hover_data={'valor': ':.2f'},
                 barmode='stack')
    fig.update_layout(height=700)
    st.plotly_chart(fig)


def Demanda():
    st.title("Demanda El√©ctrica")
    st.write("La demanda el√©ctrica se refiere a la cantidad de electricidad que los consumidores requieren en " \
            " un momento o periodo espec√≠fico. Es una medida de la cantidad de energ√≠a que se necesita para satisfacer " \
            " las necesidades de los usuarios, ya sean residenciales, comerciales o industriales.")

    df_demanda = pd.read_csv('../lib/data/processed/demanda/demanda-limpio.csv')
    df_ire = pd.read_csv('../lib/data/processed/demanda/ire-limpio.csv')
    df_demanda['fecha'] = pd.to_datetime(df_demanda['fecha'])
    df_demanda['a√±o'] = df_demanda['fecha'].dt.year

    # Selecci√≥n del tipo de visualizaci√≥n
    seleccion = st.radio("Elegir tipo de grafico", ["√öltimos d√≠as", "A√±o espec√≠fico"])

    if seleccion == "√öltimos d√≠as":
        dias = st.selectbox("Selecciona el rango de d√≠as:", [7, 14, 30])
        fecha_max = df_demanda['fecha'].max()
        fecha_min = fecha_max - pd.Timedelta(days=dias)
        df_filtrado = df_demanda[df_demanda['fecha'] >= fecha_min]

        titulo = f"Evoluci√≥n de demanda - √öltimos {dias} d√≠as"
    else:
        a√±o = st.selectbox("Selecciona el a√±o:", sorted(df_demanda['a√±o'].unique()))
        df_filtrado = df_demanda[df_demanda['a√±o'] == a√±o]
        titulo = f"Evoluci√≥n de demanda - A√±o {a√±o}"

    # Gr√°fico de l√≠neas filtrado
    grafico_lineas = df_filtrado.groupby(['fecha', 'indicador'])['valor'].sum().reset_index()
    fig = px.line(grafico_lineas,
                  x='fecha',
                  y='valor',
                  color='indicador',
                  title="Evoluci√≥n de demanda en la regi√≥n peninsular",
                  labels={'fecha': 'Fecha', 'valor': 'Wh', 'indicador': 'Tipo de energ√≠a'})
    fig.update_traces(line=dict(width=1))
    fig.update_layout(xaxis_title='Fecha', xaxis_tickformat='%b %Y')
    st.plotly_chart(fig)

    st.write("*√çndice de Red El√©ctrica (IRE)* es el indicador el√©ctrico adelantado que recoge la evoluci√≥n " \
            " del consumo de energ√≠a el√©ctrica de las empresas que tienen un consumo de energ√≠a el√©ctrica " \
            " de tama√±o medio/alto (potencia contratada superior a 450 kW). ")
    
    filtro = df_ire['indicador'].isin(['√çndice general corregido', '√çndice industria corregido', '√çndice servicios corregido'])
    df_filtrado = df_ire[filtro]

    df_agrupado = df_filtrado.groupby(['a√±o', 'indicador'])['valor'].sum().reset_index()



    grafico_lineas = df_ire.groupby(['fecha', 'indicador'])['valor'].sum().reset_index()
    fig = px.line(grafico_lineas,
                x='fecha',
                y='valor',
                color='indicador',
                title="Evoluci√≥n de ire de demanda en la regi√≥n peninsular",
                labels={'fecha': 'Fecha', 'energia': 'Wh', 'tipo energia': 'Tipo de energ√≠a'})
    fig.update_traces(line=dict(width=1))
    fig.update_layout(xaxis_title='Fecha', xaxis_tickformat='%b %Y')
    st.plotly_chart(fig)


    grafico_barras = df_agrupado.groupby(['a√±o', 'indicador'])['valor'].sum().reset_index()

    fig = px.bar(grafico_barras,
                x='a√±o',
                y='valor',
                color='indicador',
                title="Distribuci√≥n de los tipos de ire por a√±os",
                labels={'valor': 'Wh', 'indicador': 'indices'})
    st.plotly_chart(fig)

def Generacion():
    st.title("Generaci√≥n El√©ctrica")
    st.write("La generaci√≥n el√©ctrica convierte energ√≠a mec√°nica, t√©rmica o luminosa en electricidad " \
            "utilizable para consumo dom√©stico, industrial y comercial.")

    df_generacion = pd.read_csv('../lib/data/processed/generacion/estructura-generacion-limpio.csv')
    df_generacion['fecha'] = pd.to_datetime(df_generacion['fecha'])
    df_generacion['a√±o'] = df_generacion['fecha'].dt.year

    seleccion = st.radio("Elegir tipo de grafico", ["√öltimos d√≠as", "A√±o espec√≠fico"])

    if seleccion == "√öltimos d√≠as":
        dias = st.selectbox("Selecciona el rango de d√≠as:", [7, 14, 30])
        fecha_max = df_generacion['fecha'].max()
        fecha_min = fecha_max - pd.Timedelta(days=dias)
        df_filtrado = df_generacion[df_generacion['fecha'] >= fecha_min]

        titulo = f"Evoluci√≥n de generaci√≥n - √öltimos {dias} d√≠as"
    else:
        a√±o = st.selectbox("Selecciona el a√±o:", sorted(df_generacion['a√±o'].unique()))
        df_filtrado = df_generacion[df_generacion['a√±o'] == a√±o]
        titulo = f"Evoluci√≥n de generaci√≥n - A√±o {a√±o}"

    # Gr√°fico de energ√≠a renovable vs no renovable
    grafico_lineas_generacion = df_filtrado.groupby(['fecha', 'tipo'])['valor'].sum().reset_index()
    fig_generacion = px.line(grafico_lineas_generacion,
                             x='fecha',
                             y='valor',
                             color='tipo',
                             title="Evoluci√≥n de energ√≠a Renovable vs No renovable en la regi√≥n peninsular",
                             labels={'fecha': 'Fecha', 'valor': 'kWh', 'tipo': 'Tipo de energ√≠a'})
    fig_generacion.update_traces(line=dict(width=1))
    fig_generacion.update_layout(xaxis_title='Fecha', xaxis_tickformat='%b %Y')
    st.plotly_chart(fig_generacion)


    grafico_barras = df_generacion.groupby(['a√±o', 'tipo'])['valor'].sum().reset_index()

    fig = px.bar(grafico_barras,
                x='a√±o',
                y='valor',
                color='tipo',
                title="Distribuci√≥n de tipo de energia por a√±os",
                labels={'energia': 'kWh', 'tipo': 'Tipo de energ√≠a'},
                hover_name='tipo',
                barmode='stack')
    st.plotly_chart(fig)

    grafico_hist = df_generacion.groupby(['indicador', 'a√±o'])['valor'].sum().reset_index()

    fig = px.bar(grafico_hist,
                x='indicador',
                y='valor',
                color='a√±o',  
                title='Distribuci√≥n de generaci√≥n por tipo de energ√≠a y a√±o',
                barmode='group')
    st.plotly_chart(fig)
  
def intercambio():
    st.title("Intercambio Internacional")
    st.write("El intercambio internacional energ√©tico se refiere a la compra y venta de energ√≠a " \
            "entre pa√≠ses. En el caso de la electricidad, se trata del flujo de energ√≠a el√©ctrica " \
            "que cruza las fronteras nacionales a trav√©s de interconexiones el√©ctricas.")

    df_intercambio = pd.read_csv('../lib/data/processed/intercambio/fronteras-limpio.csv')
    df_intercambio['fecha'] = pd.to_datetime(df_intercambio['fecha'])
    df_intercambio['a√±o'] = df_intercambio['fecha'].dt.year

    seleccion = st.radio("Elegir tipo de grafico", ["√öltimos d√≠as", "A√±o espec√≠fico"])

    if seleccion == "√öltimos d√≠as":
        dias = st.selectbox("Selecciona el rango de d√≠as:", [7, 14, 30])
        fecha_max = df_intercambio['fecha'].max()
        fecha_min = fecha_max - pd.Timedelta(days=dias)
        df_filtrado = df_intercambio[df_intercambio['fecha'] >= fecha_min]
    else:
        a√±o = st.selectbox("Selecciona el a√±o:", sorted(df_intercambio['a√±o'].unique()))
        df_filtrado = df_intercambio[df_intercambio['a√±o'] == a√±o]

    # Gr√°fico de l√≠neas por pa√≠s
    grafico_lineas = df_filtrado.groupby(['fecha', 'pais'])['valor'].sum().reset_index()
    fig = px.line(grafico_lineas,
                  x='fecha',
                  y='valor',
                  color='pais',
                  title="Evoluci√≥n de la exportaci√≥n de energ√≠a por pa√≠s",
                  labels={'fecha': 'Fecha', 'valor': 'kWh', 'pais': 'Pa√≠s'})
    fig.update_traces(line=dict(width=1))
    fig.update_layout(xaxis_title='Fecha', xaxis_tickformat='%b %Y')
    st.plotly_chart(fig)

    grafico_barras = df_intercambio.groupby(['a√±o', 'pais'])['valor'].sum().reset_index()

    fig = px.bar(grafico_barras,
                x='a√±o',
                y='valor',
                color='pais',
                title="Distribuci√≥n de la exportacion de energia por a√±os",
                labels={'energia': 'kWh', 'pais': 'pais'},
                hover_name='pais',
                barmode='stack')
    st.plotly_chart(fig)

    # Grafico heatmap:
    grafico_barras = df_intercambio.groupby(['a√±o', 'pais'])['valor'].sum().reset_index()

    heatmap_data = grafico_barras.pivot(index='a√±o', columns='pais', values='valor')

    fig = px.imshow(heatmap_data,
                    title="Distribuci√≥n de la exportaci√≥n de energ√≠a por a√±os (Heatmap)",
                    labels={'x': 'Pais', 'y': 'A√±o', 'color': 'kWh'},
                    color_continuous_scale='Blues')
    st.plotly_chart(fig)

st.sidebar.title('Navegaci√≥n')
pagina = st.sidebar.radio("", ("P√°gina de Inicio", "Balance", "Demanda", "Generaci√≥n", "Intercambio"))



if pagina == 'P√°gina de Inicio':
    main()
elif pagina == 'Balance':
    Balance()
elif pagina == 'Demanda':
    Demanda()
elif pagina == 'Generaci√≥n':
    Generacion()
elif pagina == 'Intercambio':
    intercambio()
