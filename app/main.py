import streamlit as st

import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import pandas as pd
import requests


# PAGINA PRINCIPAL DEL PROYECTO(TITULO, IMAGEN Y DESCRIPCION)
def main():
    st.title("Proyecto Red El√©ctrica Espa√±a")

    st.image("images/Red_El√©ctrica_de_Espa√±a_(logo).png", width=600)

    st.write("El objetivo principal de este proyecto es extraer, procesar y visualizar datos energ√©ticos de la web de Red El√©ctrica de Espa√±a (REE), " \
    "relacionados con la demanda el√©ctrica, el balance energ√©tico, la generaci√≥n y los intercambios internacionales de energ√≠a. Esto permite visualizar " \
    "y analizar c√≥mo se comporta el sistema el√©ctrico espa√±ol en distintos momentos del d√≠a y del a√±o.")

    st.write('Definicion de los datos:')
    # Esto es un selectbox que permite seleccionar entre los diferentes tipos de datos que tenemos
    # y muestra una breve descripcion de cada uno de ellos
    opcion = st.selectbox('Seleccionar los datos:', 
                                   ('Balance', 'Demanda', 'Generaci√≥n', 'Intercambio'))
    if opcion == 'Balance':
        st.info("üîÑ El **balance energ√©tico** representa la diferencia entre la energ√≠a generada y la consumida.")
    elif opcion == 'Demanda':
        st.info("‚ö° La **demanda el√©ctrica** muestra cu√°nta energ√≠a est√°n consumiendo los usuarios en un momento dado o durante un periodo.")
    elif opcion == 'Generaci√≥n':
        st.info("‚öôÔ∏è La **generaci√≥n el√©ctrica** indica cu√°nta energ√≠a se est√° produciendo y con qu√© fuentes (renovables, no renovables, nuclear, etc.).")
    elif opcion == 'Intercambio':
        st.info("üåç Los **intercambios internacionales** reflejan la energ√≠a que Espa√±a importa o exporta a pa√≠ses vecinos a trav√©s de las interconexiones.")

    st.write('Clasificaci√≥n de las fuentes de energ√≠a')
    # Esto es un selectbox que permite seleccionar entre los diferentes tipos de datos que tenemos
    # y muestra una breve descripcion de cada uno de ellos
    opcion = st.selectbox('Fuentes de energ√≠a:', 
                                   ('Renovables', 'No renovables', 'Otras categorias'))
    if opcion == 'Renovables':
        st.info(
            "üå± **Fuentes de energ√≠a renovables**\n\n"
            "Estas fuentes se regeneran de manera natural y son sostenibles en el tiempo. Incluyen:\n\n"
            "- E√≥lica\n"
            "- Hidr√°ulica\n"
            "- Hidroe√≥lica\n"
            "- Solar fotovoltaica\n"
            "- Solar t√©rmica\n"
            "- Otras renovables (biog√°s, biomasa, hidr√°ulica marina y geot√©rmica)\n"
            "- Generaci√≥n renovable\n"
            "- Turbinaci√≥n bombeo\n"
        )
    elif opcion == 'No renovables':
        st.info(
            "‚öôÔ∏è **Fuentes de energ√≠a no renovables**\n\n"
            "Estas fuentes provienen de recursos limitados o contaminantes. Incluyen:\n\n"
            "- Carb√≥n\n"
            "- Ciclo combinado\n"
            "- Cogeneraci√≥n\n"
            "- Fuel + Gas\n"
            "- Motores di√©sel\n"
            "- Nuclear\n"
            "- Residuos no renovables\n"
            "- Turbina de gas\n"
            "- Turbina de vapor\n"
            "- Generaci√≥n no renovable"
        )
    elif opcion == 'Otras categorias':
        st.info(
            "‚öñÔ∏è **Otras categor√≠as**\n\n"
            "Estas no son fuentes de generaci√≥n directa, pero est√°n presentes en el sistema. Incluyen:\n\n"
            "- Consumo bombeo (se usa para almacenar energ√≠a, no genera)\n"
            "- Saldo I. internacionales (intercambios con otros pa√≠ses)\n"
            "- Saldo almacenamiento (puede incluir carga y entrega de bater√≠as)\n"
            "- Carga bater√≠a (almacenamiento, no producci√≥n directa)"
        )

# A√ëADIR LOS DATOS DE CADA UNA DE LAS SECCIONES EN LA FUNCION CORRESPONDIENTE
def Balance():
    st.title("Balance Energ√©tico")
    st.write("En este apartado se representa la cantidad total de electricidad generada por todas las fuentes disponibles " \
             "en el sistema el√©ctrico Espa√±ol a lo largo de los a√±os.")
    df_balance = pd.read_csv('../lib/data/processed/balance/balance-electrico-limpio.csv')

    st.write("**üîÑ Evoluci√≥n del balance a lo largo de los a√±os**")
    df_balance['fecha'] = pd.to_datetime(df_balance['fecha'])
    df_balance['a√±o'] = df_balance['fecha'].dt.year

    seleccion = st.radio("Elegir tipo de grafico", ["√öltimos d√≠as", "A√±o espec√≠fico"])

    # Gr√°fico de l√≠neas filtrado
    if seleccion == "√öltimos d√≠as":
        dias = st.selectbox("Selecciona el rango de d√≠as:", [7, 14, 30])
        fecha_max = df_balance['fecha'].max()
        fecha_min = fecha_max - pd.Timedelta(days=dias)
        df_filtrado = df_balance[df_balance['fecha'] >= fecha_min]
        tickformat = '%d %b'
    else:
        a√±o = st.selectbox("Selecciona el a√±o:", sorted(df_balance['a√±o'].unique()))
        df_filtrado = df_balance[df_balance['a√±o'] == a√±o]
        tickformat = '%b %Y'

    grafico_lineas = df_filtrado.groupby(['fecha', 'energia'])['valor'].sum().reset_index()
    fig = px.line(grafico_lineas,
                x='fecha',
                y='valor',
                color='energia',
                labels={'fecha': 'Fecha', 'valor': 'kWh', 'energia': 'Tipo de energ√≠a'})
    fig.update_traces(line=dict(width=1))
    fig.update_layout(xaxis_title='Fecha', xaxis_tickformat=tickformat)
    st.plotly_chart(fig)
    st.write("En esta gr√°fica se observa que la energ√≠a almacenada es la que menos watios por hora aporta. Tambien podemos observar " \
    "que desde el 2019 al 2024 la energ√≠a producida por las fuentes renovables va en aumento. Adem√°s se puede ver como se " \
    "equilibra con fuentes no renovables para afrontar la demanda el√©ctrica.")

    st.write("**üîÑ Histograma del balance de electicidad**")
   
    df_balance['fecha'] = pd.to_datetime(df_balance['fecha'])
    df_balance['a√±o'] = df_balance['fecha'].dt.year

    a√±os_disponibles = sorted(df_balance['a√±o'].unique())
    a√±o = st.selectbox("Selecciona el a√±o:", a√±os_disponibles, key="select_a√±o")

    df_filtrado = df_balance[df_balance['a√±o'] == a√±o]
    
    q1 = df_filtrado['valor'].quantile(0.25)
    q3 = df_filtrado['valor'].quantile(0.75)
    iqr = q3 - q1
    valla_inferior = q1 - 1.5 * iqr
    valla_superior = q3 + 1.5 * iqr

    # Histograma
    fig_hist = px.histogram(df_filtrado, 
                            x='valor',                         
                            labels={'valor': 'Demanda diaria (kWh)'})

    fig_hist.add_vline(x=valla_inferior, line_dash="dash", line_color="red",
                    annotation_text="L√≠mite inferior", annotation_position="top left")
    fig_hist.add_vline(x=valla_superior, line_dash="dash", line_color="red",
                    annotation_text="L√≠mite superior", annotation_position="top right")

    st.plotly_chart(fig_hist)

    st.write("Aqu√≠ podemos ver un histograma de la generaci√≥n acumulada anual de electricidad, donde se marcan los l√≠mites de la valla de Tukey. "
         "Se puede ver que hay un grupo importante de tecnologias de generaci√≥n que aportan muy poca energ√≠a al sistema durante largos periodos de tiempo. " \
         "Adem√°s se pueden apreciar algunos que consumen energ√≠a. " \
         "Es importante se√±alar que en este caso, los l√≠mites no se utilizan √∫nicamente para identificar valores at√≠picos de manera estricta  "
         "sino para resaltar picos recurrentes de consumo a lo largo de los a√±os. Los valores fuera de estos l√≠mites nos ayudan a entender" \
         " c√≥mo se distribuye el consumo en un rango habitual, permiti√©ndonos detectar sobresaturaciones de la red el√©ctrica.") 


def Demanda():
    st.title("Demanda El√©ctrica")
    st.write("La demanda el√©ctrica se refiere a la cantidad de electricidad que los consumidores requieren en " \
            " un momento o periodo espec√≠fico. Es una medida de la cantidad de energ√≠a que se necesita para satisfacer " \
            " las necesidades de los usuarios, ya sean residenciales, comerciales o industriales.")

    df_demanda = pd.read_csv('../lib/data/processed/demanda/demanda-limpio.csv')
    df_ire = pd.read_csv('../lib/data/processed/demanda/ire-limpio.csv')
    df_demanda['fecha'] = pd.to_datetime(df_demanda['fecha'])
    df_demanda['a√±o'] = df_demanda['fecha'].dt.year

    st.write("**‚ö°Evoluci√≥n de demanda en la regi√≥n peninsular**")

    # Selecci√≥n del tipo de visualizaci√≥n
    seleccion = st.radio("Elegir tipo de grafico", ["√öltimos d√≠as", "A√±o espec√≠fico"])

    if seleccion == "√öltimos d√≠as":
        dias = st.selectbox("Selecciona el rango de d√≠as:", [7, 14, 30], key="select_dias")
        fecha_max = df_demanda['fecha'].max()
        fecha_min = fecha_max - pd.Timedelta(days=dias)
        df_filtrado = df_demanda[df_demanda['fecha'] >= fecha_min]
        tickformat = '%d %b'
    else:
        a√±o = st.selectbox("Selecciona el a√±o:", sorted(df_demanda['a√±o'].unique()), key="select_a√±o")
        df_filtrado = df_demanda[df_demanda['a√±o'] == a√±o]
        tickformat = '%b %Y'

    
    grafico_lineas = df_filtrado.groupby(['fecha', 'indicador'])['valor'].sum().reset_index()
    fig = px.line(grafico_lineas,
                x='fecha',
                y='valor',
                color='indicador',
                labels={'fecha': 'Fecha', 'valor': 'kWh', 'indicador': 'Tipo de energ√≠a'})
    fig.update_traces(line=dict(width=1))
    fig.update_layout(xaxis_title='Fecha', xaxis_tickformat=tickformat)
    st.plotly_chart(fig)
    st.write("En esta grafica se observa que la demanda energ√©tica sigue unos patrones mas o menos estables a lo largo" \
    "de los a√±os, los meses donde m√°s aumnenta son los de enero y los de julio, coincidiendo con las √©pocas mas frias y mas calurosas" \
    "de la pen√≠nsula.")
    
    st.write("**‚ö°√çndice de Red El√©ctrica (IRE)**")
    
    st.write("El IRE es el indicador el√©ctrico adelantado que recoge la evoluci√≥n " \
            " del consumo de energ√≠a el√©ctrica de las empresas que tienen un consumo de energ√≠a el√©ctrica " \
            " de tama√±o medio/alto (potencia contratada superior a 450 kW). Al revisar los valores del IRE tenemos que tener en " \
            "cuenta algunos conceptos clave:\n"
            "- **Ire**: Es el √≠ndice tal cual se calcula a partir de los datos reales de consumo el√©ctrico, sin ning√∫n tipo de ajuste. " \
            " Es decir, refleja la evoluci√≥n bruta de la demanda el√©ctrica respecto al mismo mes del a√±o anterior y puede estar afectado por " \
            "factores externos como el tiempo o las festividades.\n"
            "- **Ire Corregido**: Se ajustan los valores para eliminar los efectos de las festividades (si un mes tiene mas fines de semana o feriados)" \
            "y la temperatura para realizar comparaciones mas justas entre periodos.\n")
    st.write("Por otra parte, tenemos tres tipos de IRE:\n" \
        "- **Ire General**: Es el √≠ndice que representa la evoluci√≥n total de la demanda el√©ctrica nacional (en Espa√±a) para una determinada fecha o periodo," \
        " comparado con el mismo periodo del a√±o anterior. Incluye todos los sectores: industrial, servicios y dom√©stico. \n" \
        "- **Ire Industria**: Este mide espec√≠ficamente la demanda el√©ctrica de la industria. Es un buen indicador de la actividad industrial del pa√≠s, " \
        "ya que si las f√°bricas consumen m√°s electricidad, suele ser porque est√°n produciendo m√°s.\n" \
        "- **Ire Servicios**: Refleja el consumo el√©ctrico del sector servicios (oficinas, comercios, hoteles, hospitales, etc.). Puede estar influenciado " \
        "por la actividad econ√≥mica y tambi√©n por factores estacionales como el turismo o el clima.")
    
    filtro = df_ire['indicador'].isin(['√çndice general corregido', '√çndice industria corregido', '√çndice servicios corregido'])
    df_filtrado = df_ire[filtro]

    df_agrupado = df_filtrado.groupby(['a√±o', 'indicador'])['valor'].sum().reset_index()

     # Gr√°fico de l√≠neas
    
    a√±o = st.selectbox("Selecciona el a√±o:", sorted(df_demanda['a√±o'].unique()), key="select_a√±o2")
    df_filtrado = df_demanda[df_demanda['a√±o'] == a√±o]
    tickformat = '%b %Y'

    df_ire_filtrado = df_ire[df_ire['a√±o'] == a√±o]

    grafico_lineas = df_ire_filtrado.groupby(['fecha', 'indicador'])['valor'].sum().reset_index()

    fig = px.line(grafico_lineas,
                x='fecha',
                y='valor',
                color='indicador',
                title="Evoluci√≥n de ire de demanda en la regi√≥n peninsular",
                labels={'fecha': 'Fecha', 'valor': 'kWh', 'indicador': 'Tipo de energ√≠a'})
    fig.update_traces(line=dict(width=1))
    fig.update_layout(xaxis_title='Fecha', xaxis_tickformat=tickformat)
    st.plotly_chart(fig)

    st.write("En la grafica podemos observar que el IRE Servicios despunta en Julio haciendo aumentar el IRE General y el IRE Industria es el que m√°s bajo est√° " \
    "en agosto, cuadrando con el periodo vacacional. Adem√°s, a partir de marzo de 2020 todos los valores se desploman debido a la pandemia.")

    grafico_barras = df_agrupado.groupby(['a√±o', 'indicador'])['valor'].sum().reset_index()

    fig = px.bar(grafico_barras,
                x='a√±o',
                y='valor',
                color='indicador',
                title="Distribuci√≥n de los tipos de ire por a√±os",
                labels={'valor': 'kWh', 'indicador': 'indices'})
    st.plotly_chart(fig)
    st.write("Este gr√°fico muestra una visi√≥n general de los diferentes IRE a lo largo de los a√±os.")

    ## Grafico para comparar dos a√±os:
    st.write("**‚ö° Comparaci√≥n de la demanda el√©ctrica a lo largo de los a√±os**")

    a√±os_disponibles = list(range(2019, 2025))

    a√±o_1 = st.selectbox("Selecciona el primer a√±o:", a√±os_disponibles, key="a√±o1")
    a√±o_2 = st.selectbox("Selecciona el segundo a√±o:", a√±os_disponibles, key="a√±o2")

    st.write(f"Comparando los a√±os: {a√±o_1} vs {a√±o_2}")

    a√±os = [a√±o_1, a√±o_2]
    df_comparar = df_demanda[df_demanda['a√±o'].isin(a√±os)]

    estadisticas_por_a√±o = []

    for a√±o in a√±os:
        valores = df_comparar[df_comparar['a√±o'] == a√±o]['valor']
        stats = valores.describe()
        media = stats['mean']
        mediana = valores.median()
        minimo = stats['min']
        maximo = stats['max']

        estadisticas_por_a√±o.append({
            'a√±o': a√±o,
            'media': media,
            'mediana': mediana,
            'min': minimo,
            'max': maximo,
        })

    df_estadisticas = pd.DataFrame(estadisticas_por_a√±o)

    st.write("En esta tabla podemos seleccionar los valores de media, mediana, m√°ximo y m√≠nimo y comparar dichos valores entre" \
    "a√±os. En el grafico de debajo se muestran tanto los valores estad√≠sticos como la gr√°fica de la evoluci√≥n de la demanda.")

    st.dataframe(df_estadisticas)

    df_comparar['indicador_a√±o'] = df_comparar['indicador'] + ' ' + df_comparar['a√±o'].astype(str)

    fig = px.line(df_comparar,
                x='fecha',
                y='valor',
                color='indicador_a√±o',
                title="Evoluci√≥n de demanda en la regi√≥n peninsular",
                labels={'fecha': 'Fecha', 'valor': 'kWh', 'indicador_a√±o': 'Indicador por a√±o'})

    fig = go.Figure(fig)
    colors = {
        'media': 'blue',
        'mediana': 'green',
        'min': 'red',
        'max': 'orange'
    }
    line_styles = {
        'media': 'solid',
        'mediana': 'dash',
        'min': 'dot',
        'max': 'dashdot'
    }

    for estadisticas in estadisticas_por_a√±o:
        a√±o = estadisticas['a√±o']
        for tipo in ['media', 'mediana', 'min', 'max']:
            fig.add_hline(y=estadisticas[tipo],
                        line=dict(color=colors[tipo], dash=line_styles[tipo], width=1),
                        annotation_text=f"{tipo.capitalize()} {a√±o}",
                        annotation_position="top left")

    fig.update_layout(
        xaxis_title='Fecha',
        xaxis_tickformat='%b %Y',
        legend_title='Indicador por a√±o'
    )
    fig.update_traces(line=dict(width=1))

    st.plotly_chart(fig)


def Generacion():
    st.title("Generaci√≥n")
    st.write("Definimos la generaci√≥n como la producci√≥n de energ√≠a en b.a. (bornes de alternador), " \
    "menos la consumida por los servicios auxiliares y las p√©rdidas en los transformadores.")
    
    st.write("**‚öôÔ∏è Generaci√≥n de energ√≠a Renovable vs No renovable en la regi√≥n peninsular**")
    df_generacion = pd.read_csv('../lib/data/processed/generacion/estructura-generacion-limpio.csv')
    df_generacion['fecha'] = pd.to_datetime(df_generacion['fecha'])
    df_generacion['a√±o'] = df_generacion['fecha'].dt.year

    seleccion = st.radio("Elegir tipo de grafico", ["√öltimos d√≠as", "A√±o espec√≠fico"])

     # Gr√°fico de energ√≠a renovable vs no renovable
    if seleccion == "√öltimos d√≠as":
        dias = st.selectbox("Selecciona el rango de d√≠as:", [7, 14, 30], key="select_dias")
        fecha_max = df_generacion['fecha'].max()
        fecha_min = fecha_max - pd.Timedelta(days=dias)
        df_filtrado = df_generacion[df_generacion['fecha'] >= fecha_min]
        tickformat = '%d %b'
    else:
        a√±o = st.selectbox("Selecciona el a√±o:", sorted(df_generacion['a√±o'].unique()), key="select_a√±o")
        df_filtrado = df_generacion[df_generacion['a√±o'] == a√±o]
        tickformat = '%b %Y'

    grafico_lineas_generacion = df_filtrado.groupby(['fecha', 'tipo'])['valor'].sum().reset_index()
    fig_generacion = px.line(grafico_lineas_generacion,
                             x='fecha',
                             y='valor',
                             color='tipo',
                             labels={'fecha': 'Fecha', 'valor': 'kWh', 'tipo': 'Tipo de energ√≠a'})
    fig_generacion.update_traces(line=dict(width=1))
    fig_generacion.update_layout(xaxis_title='Fecha', xaxis_tickformat=tickformat)
    st.plotly_chart(fig_generacion)

    st.write("Como ya hemos visto en otras gr√°ficas, se puede ver un aumento de la generaci√≥n de energ√≠a renovable. Esto es debido " \
    "a la inversi√≥n privada tanto de empresas como de particulares incentivada por el gobierno.")
    st.write("**‚öôÔ∏è Distribuci√≥n de tipo de energia por a√±os**")
    grafico_barras = df_generacion.groupby(['a√±o', 'tipo'])['valor'].sum().reset_index()

    fig = px.bar(grafico_barras,
                x='a√±o',
                y='valor',
                color='tipo',
                labels={'a√±o': 'A√±o', 'valor': 'kWh'},
                hover_name='tipo',
                barmode='stack')
    st.plotly_chart(fig)
    st.write("**‚öôÔ∏è Generaci√≥n por tipo de energ√≠a y a√±os**")
    grafico_hist = df_generacion.groupby(['indicador', 'a√±o'])['valor'].sum().reset_index()

    fig = px.bar(grafico_hist,
                x='a√±o',
                y='valor',
                color='indicador',  
                labels={'a√±o': 'A√±o', 'valor': 'kWh'},
                barmode='group',
                height=600)
    st.plotly_chart(fig)

    st.write("En este gr√°fico podemos ver la evoluci√≥n de las diferentes fuentes de energ√≠a a lo largo de los a√±os. Podemos" \
    "destacar que, la energ√≠a solar fotovoltaica ha aumentado considerablemente pasando de unos 9.200kW a 44.500kW. Tambien se puede " \
    "destacar que la energ√≠a del ciclo combinado (que es el respaldo cuando se necesita energ√≠a inmediata) aument√≥ en 2022 " \
    " y si nos fijamos en el valor total de la energ√≠a gastada en 2022 es mayor. La energ√≠a hidr√°ulica, depende mucho de la meteorolog√≠a, con lo que " \
    "de acuerdo con eso podemos ver que es muy vol√°til seg√∫n a√±os. La energ√≠a e√≥lica vemos como ha subido a lo largo de los a√±os al incentivar" \
    "las inversiones en energ√≠as renovables. La energ√≠a derivada de la cogeneraci√≥n, disminuye bruscamente a partir del 2019 por la reducci√≥n de " \
    "la necesidad de calor debido al cambio clim√°tico asumiendo el ciclo combinado como fuente de energ√≠a sin la producci√≥n de calor. La energ√≠a derivada" \
    "de las centrales de carb√≥n aporta cada vez menos debido a las directrices de la Uni√≥n Europea.")
  
def intercambio():
    st.title("Intercambio Internacional")
    st.write("El intercambio internacional energ√©tico se refiere a la compra y venta de energ√≠a " \
            "entre pa√≠ses. En el caso de la electricidad, se trata del flujo de energ√≠a el√©ctrica " \
            "que cruza las fronteras nacionales a trav√©s de interconexiones el√©ctricas.")

    df_intercambio = pd.read_csv('../lib/data/processed/intercambio/fronteras-limpio.csv')
    df_intercambio['fecha'] = pd.to_datetime(df_intercambio['fecha'])
    df_intercambio['a√±o'] = df_intercambio['fecha'].dt.year
    st.write("**üåç Evoluci√≥n de la exportaci√≥n de energ√≠a por pa√≠s**")
    seleccion = st.radio("Elegir tipo de grafico", ["√öltimos d√≠as", "A√±o espec√≠fico"])

    if seleccion == "√öltimos d√≠as":
        dias = st.selectbox("Selecciona el rango de d√≠as:", [7, 14, 30], key="select_dias")
        fecha_max = df_intercambio['fecha'].max()
        fecha_min = fecha_max - pd.Timedelta(days=dias)
        df_filtrado = df_intercambio[df_intercambio['fecha'] >= fecha_min]
        tickformat = '%d %b'
    else:
        a√±o = st.selectbox("Selecciona el a√±o:", sorted(df_intercambio['a√±o'].unique()), key="select_a√±o")
        df_filtrado = df_intercambio[df_intercambio['a√±o'] == a√±o]
        tickformat = '%b %Y'

    # Gr√°fico de l√≠neas por pa√≠s
    grafico_lineas = df_filtrado.groupby(['fecha', 'pais'])['valor'].sum().reset_index()
    fig = px.line(grafico_lineas,
                  x='fecha',
                  y='valor',
                  color='pais',
                  labels={'fecha': 'Fecha', 'valor': 'kWh', 'pais': 'Pa√≠s'})
    fig.update_traces(line=dict(width=1))
    fig.update_layout(xaxis_title='Fecha', xaxis_tickformat=tickformat)
    st.plotly_chart(fig)

    st.write("Las principales interconexiones de Espa√±a est√°n con Francia, Portugal y, en menor medida, con Marruecos y Andorra. " \
    "Estas importaciones y exportaciones se realizan principalmente a trav√©s de cables submarinos o l√≠neas de alta tensi√≥n.")

    st.write("**üåç Exportacion de energia por a√±os**")
    grafico_barras = df_intercambio.groupby(['a√±o', 'pais'])['valor'].sum().reset_index()

    fig = px.bar(grafico_barras,
                x='a√±o',
                y='valor',
                color='pais',
                labels={'a√±o': 'A√±o', 'valor': 'kWh'},
                hover_name='pais',
                barmode='stack')
    st.plotly_chart(fig)

    st.write("En este gr√°fico podemos ver La exportaci√≥n de electricidad de Espa√±a entre 2021 y 2022 aument√≥ significativamente, " \
    "pasando de 16,5 TWh a 25,4 TWh, lo que representa un incremento del 54%. Esto fu√© debido a la sequ√≠a en Portugal que afect√≥ a su " \
    "capacidad de generaci√≥n hidroel√©ctrica y a un par√≥n de la energ√≠a nuclear en Francia debido a aver√≠as y problemas de mantenimiento.")

    # Grafico heatmap:
    grafico_barras = df_intercambio.groupby(['a√±o', 'pais'])['valor'].sum().reset_index()
    st.write("**üåç Exportacion de energia por a√±os (Heatmap)**")
    heatmap_data = grafico_barras.pivot(index='a√±o', columns='pais', values='valor')

    fig = px.imshow(heatmap_data,
                    labels={'x': 'Pais', 'y': 'A√±o', 'color': 'GWh'},
                    color_continuous_scale='Blues')
    st.plotly_chart(fig)

    st.write("En la gr√°fica de calor, vemos que las exportaciones a Andorra son bastante estables a lo largo de los a√±os, las de "\
             "Marruecos aumentan poco a poco progresivamente, mientras que Portugal aument√≥ de manera brusca. Las exportaciones a Francia son las que " \
             "no siguen un patr√≥n definido.")
    
    # Mapa coropletico con selecci√≥n por a√±o
    st.write("**üåç Exportaci√≥n de energ√≠a por a√±os (Mapa coropletico)**")

    # Agrupar por a√±o y pa√≠s
    exportaciones_year = df_intercambio.groupby(['a√±o', 'pais'])['valor'].sum().reset_index()

    # Selectbox para elegir el a√±o
    year = st.selectbox("Selecciona un a√±o:", sorted(exportaciones_year['a√±o'].unique()), key="mapa_a√±o")

    # Filtrar solo el a√±o seleccionado
    exportaciones_filtradas = exportaciones_year[exportaciones_year['a√±o'] == year].copy()

    # Reemplazar nombres por ISO
    exportaciones_filtradas['pais'] = exportaciones_filtradas['pais'].replace({
        'francia-frontera': 'FRA',
        'portugal-frontera': 'PRT',
        'marruecos-frontera': 'MAR',
        'andorra-frontera': 'AND'
    })

    # Escalar a GWh
    exportaciones_filtradas['valor'] = exportaciones_filtradas['valor'] / 1000

    # Crear mapa
    fig = px.choropleth(
        exportaciones_filtradas,
        locations='pais',
        locationmode='ISO-3',
        color='valor',
        hover_name='pais',
        color_continuous_scale='RdYlBu',
        range_color=[0, exportaciones_year['valor'].max() / 1000],
        labels={'valor': 'GWh'},
        title=f'Exportaci√≥n de energ√≠a por pa√≠s en {year}'
    )

    fig.update_geos(
        visible=True,
        resolution=50,
        projection_type="natural earth",
        lataxis_range=[20, 60],
        lonaxis_range=[-20, 10]
    )

    st.plotly_chart(fig)

def database():
        st.title("Estructura base de datos")
        st.write("En esta secci√≥n se muestra la estructura de la base de datos utilizada en el proyecto.")
        st.write("La base de datos est√° dividida en cuatro tablas principales:")
        st.write("- Balance: Contiene informaci√≥n sobre el balance energ√©tico.")
        st.write("- Demanda: Contiene informaci√≥n sobre la demanda el√©ctrica.")
        st.write("- Generaci√≥n: Contiene informaci√≥n sobre la generaci√≥n el√©ctrica.")
        st.write("- Intercambio: Contiene informaci√≥n sobre los intercambios internacionales de energ√≠a.")

        st.image('../database/diagrama sql.png' , caption='Diagrama de la base de datos', use_container_width=True)


st.sidebar.title('Navegaci√≥n')
pagina = st.sidebar.radio("", ("P√°gina de Inicio", "Balance", "Demanda", "Generaci√≥n", "Intercambio", 'Estructura base de datos'))



if pagina == 'P√°gina de Inicio':
    main()
elif pagina == 'Balance':
    Balance()
elif pagina == 'Demanda':
    Demanda()
elif pagina == 'Generaci√≥n':
    Generacion()
elif pagina == 'Intercambio':
    intercambio()
elif pagina == 'Estructura base de datos':
    database()