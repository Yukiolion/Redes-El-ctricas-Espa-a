import streamlit as st

import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import pandas as pd
import requests
import calendar


def Balance(df_balance):
    st.title("Balance El칠ctrico")
    st.write("En este apartado se representa la cantidad total de electricidad generada por todas las fuentes disponibles " \
            "en el sistema el칠ctrico Espa침ol a lo largo de los a침os.")

    st.write("**游댃 Evoluci칩n del balance a lo largo de los a침os**")

    df_balance['fecha'] = pd.to_datetime(df_balance['fecha'])
    df_balance['a침o'] = df_balance['fecha'].dt.year

    # Colocamos selector para elegir el tipo de visualizaci칩n:
    seleccion = st.radio("Elegir tipo de grafico", ["칔ltimos d칤as", "Rango fechas"], key="grafico_balance")

    # Gr치fico de l칤neas
    if seleccion == "칔ltimos d칤as":
        dias = st.selectbox("Selecciona el rango de d칤as:", [7, 14, 30])
        fecha_max = df_balance['fecha'].max()
        fecha_min = fecha_max - pd.Timedelta(days=dias)
        df_filtrado_evol = df_balance[df_balance['fecha'] >= fecha_min]
        tickformat = '%d %b'

        grafico_lineas = df_filtrado_evol.groupby(['fecha', 'energia'])['valor'].sum().reset_index()
        fig = px.line(
            grafico_lineas,
            x='fecha',
            y='valor',
            color='energia',
            labels={'fecha': 'Fecha', 'valor': 'kWh', 'energia': 'Tipo de energ칤a'})
        fig.update_traces(line=dict(width=1))
        fig.update_layout(xaxis_title='Fecha', xaxis_tickformat=tickformat)
        st.plotly_chart(fig)

    else:
        fecha_min_total = df_balance['fecha'].min()
        fecha_max_total = df_balance['fecha'].max()
        rango_fechas = st.date_input("Selecciona el rango de fechas:",
            value=(fecha_min_total.date(), fecha_max_total.date()),
            min_value=fecha_min_total.date(),
            max_value=fecha_max_total.date())

        if (isinstance(rango_fechas, tuple) and len(rango_fechas) == 2 
            and rango_fechas[0] is not None 
            and rango_fechas[1] is not None):
            fecha_inicio = pd.to_datetime(rango_fechas[0])
            fecha_fin = pd.to_datetime(rango_fechas[1])

            if fecha_inicio <= fecha_fin:
                df_filtrado_evol = df_balance[(df_balance['fecha'] >= fecha_inicio) &
                    (df_balance['fecha'] <= fecha_fin)]
                tickformat = '%b %Y'

                grafico_lineas = df_filtrado_evol.groupby(['fecha', 'energia'])['valor'].sum().reset_index()
                fig = px.line(
                        grafico_lineas,
                        x='fecha',
                        y='valor',
                        color='energia',
                        labels={'fecha': 'Fecha', 'valor': 'kWh', 'energia': 'Tipo de energ칤a'})
                fig.update_traces(line=dict(width=1))
                fig.update_layout(xaxis_title='Fecha', xaxis_tickformat=tickformat)
                st.plotly_chart(fig)

    st.write("En esta gr치fica se observa que la energ칤a almacenada es la que menos watios por hora aporta. Tambien podemos observar " \
    "que desde el 2019 al 2024 la energ칤a producida por las fuentes renovables va en aumento. Adem치s se puede ver como se " \
    "equilibra con fuentes no renovables para afrontar la demanda el칠ctrica.")


    
    st.write("**游댃 Histograma del balance de electicidad**")

    df_balance['fecha'] = pd.to_datetime(df_balance['fecha'])
    df_balance['a침o'] = df_balance['fecha'].dt.year
    a침os_disponibles = sorted(df_balance['a침o'].unique())

    # Selector para los a침os:
    a침o = st.selectbox("Selecciona el a침o:", a침os_disponibles, key="select_a침o")

    df_filtrado_hist = df_balance[df_balance['a침o'] == a침o]
    
    # Calculo quantiles:
    df_filtrado_hist = df_filtrado_hist.copy()
    df_filtrado_hist['valor'] = df_filtrado_hist['valor'].astype(float)
    q1 = df_filtrado_hist['valor'].quantile(0.25)
    q3 = df_filtrado_hist['valor'].quantile(0.75)
    iqr = q3 - q1
    valla_inferior = q1 - 1.5 * iqr
    valla_superior = q3 + 1.5 * iqr

    # Histograma
    fig_hist = px.histogram(df_filtrado_hist, 
                            x='valor',                         
                            labels={'valor': 'Demanda diaria (kWh)'})

    fig_hist.add_vline(x=valla_inferior, line_dash="dash", line_color="red",
                    annotation_text="L칤mite inferior", annotation_position="top left")
    fig_hist.add_vline(x=valla_superior, line_dash="dash", line_color="red",
                    annotation_text="L칤mite superior", annotation_position="top right")

    st.plotly_chart(fig_hist)

    st.write("Aqu칤 podemos ver un histograma de la generaci칩n acumulada anual de electricidad, donde se marcan los l칤mites de la valla de Tukey. "
        "Se puede ver que hay un grupo importante de tecnologias de generaci칩n que aportan muy poca energ칤a al sistema durante largos periodos de tiempo. " \
        "Adem치s se pueden apreciar algunos que consumen energ칤a. " \
        "Es importante se침alar que en este caso, los l칤mites no se utilizan 칰nicamente para identificar valores at칤picos de manera estricta  "
        "sino para resaltar picos recurrentes de consumo a lo largo de los a침os. Los valores fuera de estos l칤mites nos ayudan a entender" \
        " c칩mo se distribuye el consumo en un rango habitual, permiti칠ndonos detectar sobresaturaciones de la red el칠ctrica.") 

    st.write("**游댃 Comparaci칩n del Balance El칠ctrico a lo largo de los a침os**")

    a침os_disponibles = list(range(2015, 2025))
    a침o_1 = st.selectbox("Selecciona el primer a침o:", a침os_disponibles, key="a침o_1_balance")
    a침o_2 = st.selectbox("Selecciona el segundo a침o:", a침os_disponibles, key="a침o_2_balance")

    #st.write(f"Comparando los a침os: {a침o_1} vs {a침o_2}")

    a침os = [a침o_1, a침o_2]
    df_comparar = df_balance[df_balance['a침o'].isin(a침os)].copy()

    df_comparar['valor'] = pd.to_numeric(df_comparar['valor'], errors='coerce')
    estadisticas_por_a침o = []

    for a침o in a침os:
        valores = df_comparar[df_comparar['a침o'] == a침o]['valor']
        #st.dataframe(valores.describe())
        stats = valores.describe()

        media = stats['mean']
        mediana = valores.median()
        minimo = stats['min']
        maximo = stats['max']

        estadisticas_por_a침o.append({
            'a침o': a침o,
            'media': media,
            'mediana': mediana,
            'min': minimo,
            'max': maximo,
        })

    df_estadisticas = pd.DataFrame(estadisticas_por_a침o)

    st.write("En esta tabla podemos seleccionar los valores de media, mediana, m치ximo y m칤nimo y comparar dichos valores entre" \
    " a침os.")

    # Colocamos dataframe con las estad칤sticas:
    st.dataframe(df_estadisticas)

    # Corregir la creaci칩n de la columna 'indicador_a침o', en lugar de 'indicador' usa alg칰n criterio:
    # Aqu칤 puedes usar una columna existente o asignar un valor fijo si no tienes una columna 'indicador'
    # Ejemplo: Si quieres que todos los valores tengan el mismo "indicador", puedes asignar un texto fijo.

    df_comparar['indicador_a침o'] = 'Indicador ' + df_comparar['a침o'].astype(str)

    meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 
            'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre']
    
    df_comparar['mes'] = df_comparar['fecha'].dt.month
    df_comparar['dia'] = df_comparar['fecha'].dt.day
    df_comparar['nombre_mes'] = df_comparar['mes'].apply(lambda x: meses[x-1])

    st.write("Con este gr치fico podemos comparar el valor del balance mes a mes o el a침o completo para cada uno de los a침os seleccionados.")

    ver_a침o_entero = st.checkbox("Comparar el a침o completo", key="a침o_balance")

    if not ver_a침o_entero:
        # Selecci칩n de mes solo si no se selecciona el a침o entero
        meses_unicos = df_comparar['nombre_mes'].unique().tolist()
        meses_disponibles = [mes for mes in meses if mes in meses_unicos]
        index_default = meses_disponibles.index('Enero') if 'Enero' in meses_disponibles else 0

        mes_seleccionado = st.selectbox(
            "Selecciona el mes a comparar:",
            meses_disponibles,
            index=index_default
        )
        df_filtrado = df_comparar[df_comparar['nombre_mes'] == mes_seleccionado]
    else:
        # Si se selecciona el a침o completo, se usan todos los datos de ambos a침os
        df_filtrado = df_comparar.copy()

    mostrar_estadisticas = st.checkbox("Mostrar l칤neas de media, mediana, m치ximo y m칤nimo", key="estadisticas_balance")

    # Crear columna para eje X: d칤a-mes
    df_filtrado['dia_mes'] = df_filtrado['fecha'].dt.strftime('%d-%b')

    if ver_a침o_entero:
    
        df_filtrado['mes'] = df_filtrado['fecha'].dt.month
        df_filtrado['dia_del_a침o'] = df_filtrado['fecha'].dt.dayofyear
        df_filtrado['indicador_a침o'] = 'Balance ' + df_filtrado['a침o'].astype(str)

        mes_ticks = df_filtrado.groupby('mes')['dia_del_a침o'].min().sort_index()

        fig = px.line(
            df_filtrado,
            x='dia_del_a침o',
            y='valor',
            color='indicador_a침o',
            labels={'dia_del_a침o': 'Mes', 'valor': 'kWh', 'indicador_a침o': 'A침o'}
        )

        fig.update_layout(
            xaxis=dict(
                tickmode='array',
                tickvals=mes_ticks.values,
                ticktext=meses[:len(mes_ticks)]
            ),
            xaxis_title='Mes',
            yaxis_title='Demanda (kWh)',
            legend_title='A침o'
        )
    else:
        df_filtrado = df_filtrado[df_filtrado['nombre_mes'] == mes_seleccionado]
        df_filtrado['indicador_a침o'] = 'Balance ' + df_filtrado['a침o'].astype(str)

        fig = px.line(
            df_filtrado,
            x='dia',
            y='valor',
            color='indicador_a침o',
            labels={'dia': 'D칤as', 'valor': 'kWh', 'indicador_a침o': 'A침o'}
        )

        fig.update_layout(
            xaxis=dict(dtick=1),
            xaxis_title='D칤a del mes',
            yaxis_title='Demanda (kWh)',
            legend_title='A침o'
        )

    fig.update_traces(line=dict(width=2))

    estadisticas_filtradas = []
    for a침o in a침os:
        valores = df_filtrado[df_filtrado['a침o'] == a침o]['valor']
        stats = valores.describe()

        estadisticas_filtradas.append({
            'a침o': a침o,
            'media': stats['mean'],
            'mediana': valores.median(),
            'min': stats['min'],
            'max': stats['max']
        })

    if mostrar_estadisticas:
        colors = {'media': 'blue', 'mediana': 'green', 'min': 'red', 'max': 'orange'}
        line_styles = {'media': 'solid', 'mediana': 'dash', 'min': 'dot', 'max': 'dashdot'}

        for est in estadisticas_filtradas:
            a침o = est['a침o']
            for tipo in ['media', 'mediana', 'min', 'max']:
                fig.add_hline(
                    y=est[tipo],
                    line=dict(color=colors[tipo], dash=line_styles[tipo], width=1),
                    annotation_text=f"{tipo.capitalize()} {a침o}",
                    annotation_position="top left"
                )

    st.plotly_chart(fig)