import streamlit as st

import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import pandas as pd
import requests

def Intercambio(df_intercambio):
    st.title("Intercambio Internacional")
    st.write("El intercambio internacional energ√©tico se refiere a la compra y venta de energ√≠a " \
            "entre pa√≠ses. En el caso de la electricidad, se trata del flujo de energ√≠a el√©ctrica " \
            "que cruza las fronteras nacionales a trav√©s de interconexiones el√©ctricas.")

    df_intercambio['fecha'] = pd.to_datetime(df_intercambio['fecha'])
    df_intercambio['a√±o'] = df_intercambio['fecha'].dt.year

    st.write("**üåç Evoluci√≥n de la exportaci√≥n de energ√≠a por pa√≠s**")

    # Colocamos selector para elegir el tipo de visualizaci√≥n:
    seleccion = st.radio("Elegir tipo de grafico", ["√öltimos d√≠as", "Rango fechas"])

    # Grafico de lineas
    if seleccion == "√öltimos d√≠as":
        dias = st.selectbox("Selecciona el rango de d√≠as:", [7, 14, 30], key="select_dias_intercambio")
        fecha_max = df_intercambio['fecha'].max()
        fecha_min = fecha_max - pd.Timedelta(days=dias)
        df_filtrado = df_intercambio[df_intercambio['fecha'] >= fecha_min]
        tickformat = '%d %b'

        grafico_lineas = df_filtrado.groupby(['fecha', 'pais'])['valor'].sum().reset_index()
        fig = px.line(grafico_lineas,
                    x='fecha',
                    y='valor',
                    color='pais',
                    labels={'fecha': 'Fecha', 'valor': 'kWh', 'pais': 'Pa√≠s'})
        fig.update_traces(line=dict(width=1))
        fig.update_layout(xaxis_title='Fecha', xaxis_tickformat=tickformat)
        st.plotly_chart(fig)

    else:
        fecha_min_total = df_intercambio['fecha'].min()
        fecha_max_total = df_intercambio['fecha'].max()
        rango_fechas = st.date_input(
            "Selecciona el rango de fechas:",
            value=(fecha_min_total.date(), fecha_max_total.date()),
            min_value=fecha_min_total.date(),
            max_value=fecha_max_total.date(),
            key="select_rango_intercambio")

        if (isinstance(rango_fechas, tuple)
            and len(rango_fechas) == 2
            and rango_fechas[0] is not None
            and rango_fechas[1] is not None):
            fecha_inicio = pd.to_datetime(rango_fechas[0])
            fecha_fin = pd.to_datetime(rango_fechas[1])

            if fecha_inicio <= fecha_fin:
                df_filtrado = df_intercambio[
                    (df_intercambio['fecha'] >= fecha_inicio) &
                    (df_intercambio['fecha'] <= fecha_fin)]
                tickformat = '%b %Y'

                grafico_lineas = df_filtrado.groupby(['fecha', 'pais'])['valor'].sum().reset_index()
                fig = px.line(grafico_lineas,
                            x='fecha',
                            y='valor',
                            color='pais',
                            labels={'fecha': 'Fecha', 'valor': 'kWh', 'pais': 'Pa√≠s'})
                fig.update_traces(line=dict(width=1))
                fig.update_layout(xaxis_title='Fecha', xaxis_tickformat=tickformat)
                st.plotly_chart(fig)

    st.write("Las principales interconexiones de Espa√±a est√°n con Francia, Portugal y, en menor medida, con Marruecos y Andorra. " \
    "Estas importaciones y exportaciones se realizan principalmente a trav√©s de cables submarinos o l√≠neas de alta tensi√≥n.")




    st.write("**üåç Exportacion de energia por a√±os**")

    # Gr√°fico de barras:
    grafico_barras = df_intercambio.groupby(['a√±o', 'pais'])['valor'].sum().reset_index()
    fig = px.bar(grafico_barras,
                x='a√±o',
                y='valor',
                color='pais',
                labels={'a√±o': 'A√±o', 'valor': 'kWh'},
                hover_name='pais',
                barmode='stack')
    st.plotly_chart(fig)

    st.write("En este gr√°fico podemos ver La exportaci√≥n de electricidad de Espa√±a entre 2021 y 2022 aument√≥ significativamente, " \
    "pasando de 16,5 TWh a 25,4 TWh, lo que representa un incremento del 54%. Esto fu√© debido a la sequ√≠a en Portugal que afect√≥ a su " \
    "capacidad de generaci√≥n hidroel√©ctrica y a un par√≥n de la energ√≠a nuclear en Francia debido a aver√≠as y problemas de mantenimiento.")




    st.write("**üåç Exportacion de energia por a√±os (Heatmap)**")

    # Grafico heatmap:
    grafico_barras = df_intercambio.groupby(['a√±o', 'pais'])['valor'].sum().reset_index()
    heatmap_data = grafico_barras.pivot(index='a√±o', columns='pais', values='valor')

    fig = px.imshow(heatmap_data,
                    labels={'x': 'Pais', 'y': 'A√±o', 'color': 'GWh'},
                    color_continuous_scale='Blues')
    st.plotly_chart(fig)

    st.write("En la gr√°fica de calor, vemos que las exportaciones a Andorra son bastante estables a lo largo de los a√±os, las de "\
                "Marruecos aumentan poco a poco progresivamente, mientras que Portugal aument√≥ de manera brusca. Las exportaciones a Francia son las que " \
                "no siguen un patr√≥n definido.")
    



    st.write("**üåç Exportaci√≥n de energ√≠a por a√±os (Mapa coropletico)**")

    # Agrupar por a√±o y pa√≠s
    exportaciones_year = df_intercambio.groupby(['a√±o', 'pais'])['valor'].sum().reset_index()

    # Colocamos selector para elegir el tipo de visualizaci√≥n:
    year = st.selectbox("Selecciona un a√±o:", sorted(exportaciones_year['a√±o'].unique()), key="mapa_a√±o")

    # Filtrar solo el a√±o seleccionado y colocar los nombres por ISO:
    exportaciones_filtradas = exportaciones_year[exportaciones_year['a√±o'] == year].copy()

    exportaciones_filtradas['pais'] = exportaciones_filtradas['pais'].replace({
        'francia-frontera': 'FRA',
        'portugal-frontera': 'PRT',
        'marruecos-frontera': 'MAR',
        'andorra-frontera': 'AND'})

    # Escalar a GWh
    exportaciones_filtradas['valor'] = exportaciones_filtradas['valor'] / 1000

    # Mapa coropletico con selecci√≥n por a√±o
    fig = px.choropleth(
        exportaciones_filtradas,
        locations='pais',
        locationmode='ISO-3',
        color='valor',
        hover_name='pais',
        color_continuous_scale='RdYlBu',
        range_color=[0, exportaciones_year['valor'].max() / 1000],
        labels={'valor': 'GWh'},)

    fig.update_geos(
        visible=True,
        resolution=50,
        projection_type="natural earth",
        lataxis_range=[20, 60],
        lonaxis_range=[-20, 10])
    fig.update_layout(
        height=700,)
    st.plotly_chart(fig)



    
    st.write("**üåç Exportaci√≥n de energ√≠a anual per c√°pita**")

    # Grafico de energia per capita:
    df_energia_total = pd.read_csv('../app/data/energia_per_capita.csv')
    
    fig_energia = px.line(
        df_energia_total,
        x="a√±o",
        y="energia_per_capita",
        color="pais",
        markers=True,
        labels={"energia_per_capita": "MWh/persona", "a√±o": "A√±o", "pais": "Pa√≠s"})

    fig_energia.update_layout(
        legend_title_text="Pa√≠s destino",
        hovermode="x unified",
        template="plotly_white")

    st.plotly_chart(fig_energia)

    st.write("- Marruecos: Tiende a mostrar valores per c√°pita muy peque√±os.\n" \
        "- Francia: Tiende a tener altos vol√∫menes de energ√≠a exportada y una poblaci√≥n grande, por lo que la "
            "energ√≠a per c√°pita exportada puede parecer moderada. \n" \
            "- Portugal: Con este pa√≠s hay acuerdos de exportaci√≥n en crecimiento, por eso se puede ver una subida per c√°pita constante.\n" \
            "- Andorra: Tiene una poblaci√≥n muy baja (~77 mil habitantes), por lo que cualquier cantidad de energ√≠a exportada "
            "se traduce en un valor per c√°pita muy alto. Es probable que presente los valores m√°s altos per c√°pita, "
            "aunque el volumen total sea peque√±o.\n")
    
    st.write("**‚ö° Comparaci√≥n del Balance el√©ctrica a lo largo de los a√±os**")

    a√±os_disponibles = list(range(2019, 2025))
    a√±o_1 = st.selectbox("Selecciona el primer a√±o:", a√±os_disponibles, key="a√±o_1_intercambio")
    a√±o_2 = st.selectbox("Selecciona el segundo a√±o:", a√±os_disponibles, key="a√±o_2_intercambio")

    st.write(f"Comparando los a√±os: {a√±o_1} vs {a√±o_2}")

    a√±os = [a√±o_1, a√±o_2]
    df_comparar = df_intercambio[df_intercambio['a√±o'].isin(a√±os)]

    df_comparar['valor'] = pd.to_numeric(df_comparar['valor'], errors='coerce')
    estadisticas_por_a√±o = []

    for a√±o in a√±os:
        valores = df_comparar[df_comparar['a√±o'] == a√±o]['valor']
        st.dataframe(valores.describe())
        stats = valores.describe()

        media = stats['mean']
        mediana = valores.median()
        minimo = stats['min']
        maximo = stats['max']

        estadisticas_por_a√±o.append({
            'a√±o': a√±o,
            'media': media,
            'mediana': mediana,
            'min': minimo,
            'max': maximo,
        })

    df_estadisticas = pd.DataFrame(estadisticas_por_a√±o)

    st.write("En esta tabla podemos seleccionar los valores de media, mediana, m√°ximo y m√≠nimo y comparar dichos valores entre" \
    "a√±os. En el gr√°fico de debajo se muestran tanto los valores estad√≠sticos como la gr√°fica de la evoluci√≥n de la demanda.")

    # Colocamos dataframe con las estad√≠sticas:
    st.dataframe(df_estadisticas)

    # Corregir la creaci√≥n de la columna 'indicador_a√±o', en lugar de 'indicador' usa alg√∫n criterio:
    # Aqu√≠ puedes usar una columna existente o asignar un valor fijo si no tienes una columna 'indicador'
    # Ejemplo: Si quieres que todos los valores tengan el mismo "indicador", puedes asignar un texto fijo.
    df_comparar['indicador_a√±o'] = 'Indicador ' + df_comparar['a√±o'].astype(str)

    # Si quieres usar alguna columna existente como 'tipo' o cualquier otra, puedes hacerlo:
    # df_comparar['indicador_a√±o'] = df_comparar['tipo'] + ' ' + df_comparar['a√±o'].astype(str)

    # Grafico comparativo de los a√±os:
    fig = px.line(df_comparar,
                x='fecha',
                y='valor',
                color='indicador_a√±o',
                title="Evoluci√≥n de demanda en la regi√≥n peninsular",
                labels={'fecha': 'Fecha', 'valor': 'kWh', 'indicador_a√±o': 'Indicador por a√±o'})

    fig = go.Figure(fig)
    colors = {
        'media': 'blue',
        'mediana': 'green',
        'min': 'red',
        'max': 'orange'}
    line_styles = {
        'media': 'solid',
        'mediana': 'dash',
        'min': 'dot',
        'max': 'dashdot'}

    for estadisticas in estadisticas_por_a√±o:
        a√±o = estadisticas['a√±o']
        for tipo in ['media', 'mediana', 'min', 'max']:
            fig.add_hline(y=estadisticas[tipo],
                        line=dict(color=colors[tipo], dash=line_styles[tipo], width=1),
                        annotation_text=f"{tipo.capitalize()} {a√±o}",
                        annotation_position="top left")

    fig.update_layout(
        xaxis_title='Fecha',
        xaxis_tickformat='%b %Y',
        legend_title='Indicador por a√±o'
    )
    fig.update_traces(line=dict(width=1))

    st.plotly_chart(fig)