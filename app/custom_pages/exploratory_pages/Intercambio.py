import streamlit as st

import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import pandas as pd
import requests

def Intercambio(df_intercambio):
    st.title("Intercambio Internacional")
    st.write("El intercambio internacional energ칠tico se refiere a la compra y venta de energ칤a " \
            "entre pa칤ses. En el caso de la electricidad, se trata del flujo de energ칤a el칠ctrica " \
            "que cruza las fronteras nacionales a trav칠s de interconexiones el칠ctricas.")

    df_intercambio['fecha'] = pd.to_datetime(df_intercambio['fecha'])
    df_intercambio['a침o'] = df_intercambio['fecha'].dt.year.astype(str)
    
    st.markdown("<div style='height:30px;'></div>", unsafe_allow_html=True)
    st.write("**游깴 Evoluci칩n de la exportaci칩n de energ칤a por pa칤s**")

    # Colocamos selector para elegir el tipo de visualizaci칩n:
    seleccion = st.radio("Elegir tipo de grafico", ["칔ltimos d칤as", "Rango fechas"])

    # Grafico de lineas
    if seleccion == "칔ltimos d칤as":
        dias = st.selectbox("Selecciona el rango de d칤as:", [7, 14, 30], key="select_dias_intercambio")
        fecha_max = df_intercambio['fecha'].max()
        fecha_min = fecha_max - pd.Timedelta(days=dias)
        df_filtrado = df_intercambio[df_intercambio['fecha'] >= fecha_min]
        tickformat = '%d %b'

        grafico_lineas = df_filtrado.groupby(['fecha', 'pais'])['valor'].sum().reset_index()
        fig = px.line(grafico_lineas,
                    x='fecha',
                    y='valor',
                    color='pais',
                    labels={'fecha': 'Fecha', 'valor': 'kWh', 'pais': 'Pa칤s'})
        fig.update_traces(line=dict(width=1))
        fig.update_layout(xaxis_title='Fecha', xaxis_tickformat=tickformat)
        st.plotly_chart(fig)

    else:
        fecha_min_total = df_intercambio['fecha'].min()
        fecha_max_total = df_intercambio['fecha'].max()
        rango_fechas = st.date_input(
            "Selecciona el rango de fechas:",
            value=(fecha_min_total.date(), fecha_max_total.date()),
            min_value=fecha_min_total.date(),
            max_value=fecha_max_total.date(),
            key="select_rango_intercambio")

        if (isinstance(rango_fechas, tuple)
            and len(rango_fechas) == 2
            and rango_fechas[0] is not None
            and rango_fechas[1] is not None):
            fecha_inicio = pd.to_datetime(rango_fechas[0])
            fecha_fin = pd.to_datetime(rango_fechas[1])

            if fecha_inicio <= fecha_fin:
                df_filtrado = df_intercambio[
                    (df_intercambio['fecha'] >= fecha_inicio) &
                    (df_intercambio['fecha'] <= fecha_fin)]
                tickformat = '%b %Y'

                grafico_lineas = df_filtrado.groupby(['fecha', 'pais'])['valor'].sum().reset_index()
                fig = px.line(grafico_lineas,
                            x='fecha',
                            y='valor',
                            color='pais',
                            labels={'fecha': 'Fecha', 'valor': 'kWh', 'pais': 'Pa칤s'})
                fig.update_traces(line=dict(width=1))
                fig.update_layout(xaxis_title='Fecha', xaxis_tickformat=tickformat)
                st.plotly_chart(fig)

    st.write("Las principales interconexiones de Espa침a est치n con Francia, Portugal y, en menor medida, con Marruecos y Andorra. " \
    "Estas importaciones y exportaciones se realizan principalmente a trav칠s de cables submarinos o l칤neas de alta tensi칩n.")

    st.markdown("<div style='height:30px;'></div>", unsafe_allow_html=True)

    st.write("**游깴 Exportacion de energia por a침os**")

    # Gr치fico de barras:
    grafico_barras = df_intercambio.groupby(['a침o', 'pais'])['valor'].sum().reset_index()
    fig = px.bar(grafico_barras,
                x='a침o',
                y='valor',
                color='pais',
                labels={'a침o': 'A침o', 'valor': 'kWh'},
                hover_name='pais',
                barmode='stack')
    st.plotly_chart(fig)

    st.write("En este gr치fico podemos ver La exportaci칩n de electricidad de Espa침a entre 2021 y 2022 aument칩 significativamente, " \
    "pasando de 16,5 TWh a 25,4 TWh, lo que representa un incremento del 54%. Esto fu칠 debido a la sequ칤a en Portugal que afect칩 a su " \
    "capacidad de generaci칩n hidroel칠ctrica y a un par칩n de la energ칤a nuclear en Francia debido a aver칤as y problemas de mantenimiento.")

    st.markdown("<div style='height:30px;'></div>", unsafe_allow_html=True)
    st.write("**游깴 Exportacion de energia por a침os (Heatmap)**")

    # Grafico heatmap:
    
    grafico_barras = df_intercambio.groupby(['a침o', 'pais'])['valor'].sum().reset_index()
    heatmap_data = grafico_barras.pivot(index='a침o', columns='pais', values='valor')

    fig = px.imshow(heatmap_data,
                    labels={'x': 'Pais', 'y': 'A침o', 'color': 'GWh'},
                    color_continuous_scale='Blues')
    st.plotly_chart(fig)

    st.write("En la gr치fica de calor, vemos que las exportaciones a Andorra son bastante estables a lo largo de los a침os, las de "\
                "Marruecos aumentan poco a poco progresivamente, mientras que Portugal aument칩 de manera brusca. Las exportaciones a Francia son las que " \
                "no siguen un patr칩n definido.")
    
    st.markdown("<div style='height:30px;'></div>", unsafe_allow_html=True)
    st.write("**游깴 Exportaci칩n de energ칤a por a침os (Mapa coropletico)**")

    # Agrupar por a침o y pa칤s
    exportaciones_year = df_intercambio.groupby(['a침o', 'pais'])['valor'].sum().reset_index()

    # Colocamos selector para elegir el tipo de visualizaci칩n:
    year = st.selectbox("Selecciona un a침o:", sorted(exportaciones_year['a침o'].unique()), key="mapa_a침o")

    # Filtrar solo el a침o seleccionado y colocar los nombres por ISO:
    exportaciones_filtradas = exportaciones_year[exportaciones_year['a침o'] == year].copy()

    exportaciones_filtradas['pais'] = exportaciones_filtradas['pais'].replace({
        'francia-frontera': 'FRA',
        'portugal-frontera': 'PRT',
        'marruecos-frontera': 'MAR',
        'andorra-frontera': 'AND'})

    # Escalar a GWh
    exportaciones_filtradas['valor'] = exportaciones_filtradas['valor'] / 1000

    # Mapa coropletico con selecci칩n por a침o
    fig = px.choropleth(
        exportaciones_filtradas,
        locations='pais',
        locationmode='ISO-3',
        color='valor',
        hover_name='pais',
        color_continuous_scale='RdYlBu',
        range_color=[0, exportaciones_year['valor'].max() / 1000],
        labels={'valor': 'GWh'},)

    fig.update_geos(
        visible=True,
        resolution=50,
        projection_type="natural earth",
        lataxis_range=[20, 60],
        lonaxis_range=[-20, 10])
    fig.update_layout(
        height=700,)
    st.plotly_chart(fig)
    
    st.write("**游깴 Exportaci칩n de energ칤a anual per c치pita**")

    # Grafico de energia per capita:
    df_energia_total = pd.read_csv('app/data/energia_per_capita.csv')
    
    fig_energia = px.line(
        df_energia_total,
        x="a침o",
        y="energia_per_capita",
        color="pais",
        markers=True,
        labels={"energia_per_capita": "MWh/persona", "a침o": "A침o", "pais": "Pa칤s"})

    fig_energia.update_layout(
        legend_title_text="Pa칤s destino",
        hovermode="x unified",
        template="plotly_white")

    st.plotly_chart(fig_energia)

    st.write("- Marruecos: Tiende a mostrar valores per c치pita muy peque침os.\n" \
        "- Francia: Tiende a tener altos vol칰menes de energ칤a exportada y una poblaci칩n grande, por lo que la "
            "energ칤a per c치pita exportada puede parecer moderada. \n" \
            "- Portugal: Con este pa칤s hay acuerdos de exportaci칩n en crecimiento, por eso se puede ver una subida per c치pita constante.\n" \
            "- Andorra: Tiene una poblaci칩n muy baja (~77 mil habitantes), por lo que cualquier cantidad de energ칤a exportada "
            "se traduce en un valor per c치pita muy alto.\n")
    
    st.markdown("<div style='height:30px;'></div>", unsafe_allow_html=True)
    st.write("**游깴 Comparaci칩n de la exportaci칩n el칠ctrica a lo largo de los a침os**")

    df_intercambio['a침o'] = df_intercambio['fecha'].dt.year

    start_year = df_intercambio['fecha'].dt.year.min()
    end_year = df_intercambio['fecha'].dt.year.max()

    a침os_disponibles = list(range(start_year, end_year + 1))
    a침o_1 = st.selectbox("Selecciona el primer a침o:", a침os_disponibles, key="a침o_1_intercambio")
    a침o_2 = st.selectbox("Selecciona el segundo a침o:", a침os_disponibles, key="a침o_2_intercambio")
    a침os = [a침o_1, a침o_2]

    df_comparar = df_intercambio[df_intercambio['a침o'].isin(a침os)].copy()
    df_comparar['valor'] = pd.to_numeric(df_comparar['valor'], errors='coerce')
    df_comparar['pais_a침o'] = df_comparar['pais'] + ' ' + df_comparar['a침o'].astype(str)

    estadisticas_por_a침o = []
    for a침o in a침os:
        valores = df_comparar[df_comparar['a침o'] == a침o]['valor']
        stats = valores.describe()

        estadisticas_por_a침o.append({
            'a침o': a침o,
            'media': stats['mean'],
            'mediana': valores.median(),
            'min': stats['min'],
            'max': stats['max']
        })

    df_estadisticas = pd.DataFrame(estadisticas_por_a침o)

    st.write("Estad칤sticas generales por a침o:")
    st.dataframe(df_estadisticas)

    df_comparar['mes'] = df_comparar['fecha'].dt.month
    df_comparar['dia'] = df_comparar['fecha'].dt.day
    meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 
            'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre']
    df_comparar['nombre_mes'] = df_comparar['mes'].apply(lambda x: meses[x - 1])

    st.write("Comparaci칩n del intercambio el칠ctrico por pa칤s entre los a침os seleccionados.")
    ver_a침o_entero = st.checkbox("Comparar el a침o completo", key="ver_a침o_intercambio")

    if not ver_a침o_entero:
        meses_unicos = df_comparar['nombre_mes'].unique().tolist()
        meses_disponibles = [mes for mes in meses if mes in meses_unicos]
        index_default = meses_disponibles.index('Enero') if 'Enero' in meses_disponibles else 0

        mes_seleccionado = st.selectbox(
            "Selecciona el mes a comparar:",
            meses_disponibles,
            index=index_default,
            key="mes_intercambio"
        )

        df_filtrado = df_comparar[df_comparar['nombre_mes'] == mes_seleccionado].copy()
    else:
        df_filtrado = df_comparar.copy()

    df_filtrado['dia_mes'] = df_filtrado['fecha'].dt.strftime('%d-%b')

    mostrar_estadisticas = st.checkbox("Mostrar l칤neas de media, mediana, m치ximo y m칤nimo", key="estadisticas_intercambio")

    if ver_a침o_entero:
        df_filtrado['dia_del_a침o'] = df_filtrado['fecha'].dt.dayofyear

        mes_ticks = df_filtrado.groupby('mes')['dia_del_a침o'].min().sort_index()

        fig = px.line(
            df_filtrado,
            x='dia_del_a침o',
            y='valor',
            color='pais_a침o',
            labels={'dia_del_a침o': 'Mes', 'valor': 'kWh', 'pais_a침o': 'Pa칤s y A침o'}
        )

        fig.update_layout(
            xaxis=dict(
                tickmode='array',
                tickvals=mes_ticks.values,
                ticktext=meses[:len(mes_ticks)]
            ),
            xaxis_title='Mes',
            yaxis_title='Intercambio (kWh)',

            legend_title='Pa칤s y A침o'
        )
    else:
        fig = px.line(
            df_filtrado,
            x='dia',
            y='valor',
            color='pais_a침o',
            labels={'dia': 'D칤a', 'valor': 'kWh', 'pais_a침o': 'Pa칤s y A침o'}
        )

        fig.update_layout(
            xaxis=dict(dtick=1),
            xaxis_title='D칤a del mes',
            yaxis_title='Intercambio (kWh)',
            legend_title='Pa칤s y A침o'
        )

    fig.update_traces(line=dict(width=2))

    if mostrar_estadisticas:
        estadisticas_filtradas = []
        for a침o in a침os:
            valores = df_filtrado[df_filtrado['a침o'] == a침o]['valor']
            stats = valores.describe()
            estadisticas_filtradas.append({
                'a침o': a침o,
                'media': stats['mean'],
                'mediana': valores.median(),
                'min': stats['min'],
                'max': stats['max']
            })

        colors = {'media': 'blue', 'mediana': 'green', 'min': 'red', 'max': 'orange'}
        line_styles = {'media': 'solid', 'mediana': 'dash', 'min': 'dot', 'max': 'dashdot'}

        for est in estadisticas_filtradas:
            a침o = est['a침o']
            for tipo in ['media', 'mediana', 'min', 'max']:
                fig.add_hline(
                    y=est[tipo],
                    line=dict(color=colors[tipo], dash=line_styles[tipo], width=1),
                    annotation_text=f"{tipo.capitalize()} {a침o}",
                    annotation_position="top left"
                )

    st.plotly_chart(fig)